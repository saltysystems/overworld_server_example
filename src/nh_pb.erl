%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.11.2
-module(nh_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).


%% enumerated types

-export_type([]).

%% message types
-type nh() ::
      #{msg                     => {join, join()} | {part, part()} | {snapshot, snapshot()} | {transfer, transfer()} % oneof
       }.

-type vector2() ::
      #{x                       := float() | integer() | infinity | '-infinity' | nan, % = 1
        y                       := float() | integer() | infinity | '-infinity' | nan % = 2
       }.

-type transfer() ::
      #{
       }.

-type snapshot() ::
      #{
       }.

-type join() ::
      #{
       }.

-type part() ::
      #{
       }.

-export_type(['nh'/0, 'vector2'/0, 'transfer'/0, 'snapshot'/0, 'join'/0, 'part'/0]).

-spec encode_msg(nh() | vector2() | transfer() | snapshot() | join() | part(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(nh() | vector2() | transfer() | snapshot() | join() | part(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
        true -> verify_msg(Msg, MsgName, Opts);
        false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        nh -> encode_msg_nh(id(Msg, TrUserData), TrUserData);
        vector2 ->
            encode_msg_vector2(id(Msg, TrUserData), TrUserData);
        transfer ->
            encode_msg_transfer(id(Msg, TrUserData), TrUserData);
        snapshot ->
            encode_msg_snapshot(id(Msg, TrUserData), TrUserData);
        join ->
            encode_msg_join(id(Msg, TrUserData), TrUserData);
        part -> encode_msg_part(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_nh(Msg, TrUserData) ->
    encode_msg_nh(Msg, <<>>, TrUserData).


encode_msg_nh(#{} = M, Bin, TrUserData) ->
    case M of
        #{msg := F1} ->
            case id(F1, TrUserData) of
                {join, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_nh_join(TrTF1, <<Bin/binary, 10>>, TrUserData)
                    end;
                {part, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_nh_part(TrTF1, <<Bin/binary, 18>>, TrUserData)
                    end;
                {snapshot, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_nh_snapshot(TrTF1,
                                             <<Bin/binary, 26>>,
                                             TrUserData)
                    end;
                {transfer, TF1} ->
                    begin
                        TrTF1 = id(TF1, TrUserData),
                        e_mfield_nh_transfer(TrTF1,
                                             <<Bin/binary, 34>>,
                                             TrUserData)
                    end
            end;
        _ -> Bin
    end.

encode_msg_vector2(Msg, TrUserData) ->
    encode_msg_vector2(Msg, <<>>, TrUserData).


encode_msg_vector2(#{x := F1, y := F2}, Bin,
                   TrUserData) ->
    B1 = begin
             TrF1 = id(F1, TrUserData),
             e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
         end,
    begin
        TrF2 = id(F2, TrUserData),
        e_type_float(TrF2, <<B1/binary, 21>>, TrUserData)
    end.

encode_msg_transfer(_Msg, _TrUserData) -> <<>>.

encode_msg_snapshot(_Msg, _TrUserData) -> <<>>.

encode_msg_join(_Msg, _TrUserData) -> <<>>.

encode_msg_part(_Msg, _TrUserData) -> <<>>.

e_mfield_nh_join(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_nh_part(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_nh_snapshot(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

e_mfield_nh_transfer(_Msg, Bin, _TrUserData) ->
    <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(nh, Bin, TrUserData) ->
    id(decode_msg_nh(Bin, TrUserData), TrUserData);
decode_msg_2_doit(vector2, Bin, TrUserData) ->
    id(decode_msg_vector2(Bin, TrUserData), TrUserData);
decode_msg_2_doit(transfer, Bin, TrUserData) ->
    id(decode_msg_transfer(Bin, TrUserData), TrUserData);
decode_msg_2_doit(snapshot, Bin, TrUserData) ->
    id(decode_msg_snapshot(Bin, TrUserData), TrUserData);
decode_msg_2_doit(join, Bin, TrUserData) ->
    id(decode_msg_join(Bin, TrUserData), TrUserData);
decode_msg_2_doit(part, Bin, TrUserData) ->
    id(decode_msg_part(Bin, TrUserData), TrUserData).



decode_msg_nh(Bin, TrUserData) ->
    dfp_read_field_def_nh(Bin,
                          0,
                          0,
                          id('$undef', TrUserData),
                          TrUserData).

dfp_read_field_def_nh(<<10, Rest/binary>>, Z1, Z2, F@_1,
                      TrUserData) ->
    d_field_nh_join(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_nh(<<18, Rest/binary>>, Z1, Z2, F@_1,
                      TrUserData) ->
    d_field_nh_part(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_nh(<<26, Rest/binary>>, Z1, Z2, F@_1,
                      TrUserData) ->
    d_field_nh_snapshot(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_nh(<<34, Rest/binary>>, Z1, Z2, F@_1,
                      TrUserData) ->
    d_field_nh_transfer(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_nh(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end;
dfp_read_field_def_nh(Other, Z1, Z2, F@_1,
                      TrUserData) ->
    dg_read_field_def_nh(Other, Z1, Z2, F@_1, TrUserData).

dg_read_field_def_nh(<<1:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_nh(Rest,
                         N + 7,
                         X bsl N + Acc,
                         F@_1,
                         TrUserData);
dg_read_field_def_nh(<<0:1, X:7, Rest/binary>>, N, Acc,
                     F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        10 -> d_field_nh_join(Rest, 0, 0, F@_1, TrUserData);
        18 -> d_field_nh_part(Rest, 0, 0, F@_1, TrUserData);
        26 -> d_field_nh_snapshot(Rest, 0, 0, F@_1, TrUserData);
        34 -> d_field_nh_transfer(Rest, 0, 0, F@_1, TrUserData);
        _ ->
            case Key band 7 of
                0 -> skip_varint_nh(Rest, 0, 0, F@_1, TrUserData);
                1 -> skip_64_nh(Rest, 0, 0, F@_1, TrUserData);
                2 ->
                    skip_length_delimited_nh(Rest, 0, 0, F@_1, TrUserData);
                3 ->
                    skip_group_nh(Rest, Key bsr 3, 0, F@_1, TrUserData);
                5 -> skip_32_nh(Rest, 0, 0, F@_1, TrUserData)
            end
    end;
dg_read_field_def_nh(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{msg => F@_1}
    end.

d_field_nh_join(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1,
                TrUserData)
    when N < 57 ->
    d_field_nh_join(Rest,
                    N + 7,
                    X bsl N + Acc,
                    F@_1,
                    TrUserData);
d_field_nh_join(<<0:1, X:7, Rest/binary>>, N, Acc, Prev,
                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_join(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_nh(RestF,
                          0,
                          0,
                          case Prev of
                              '$undef' -> id({join, NewFValue}, TrUserData);
                              {join, MVPrev} ->
                                  id({join,
                                      merge_msg_join(MVPrev,
                                                     NewFValue,
                                                     TrUserData)},
                                     TrUserData);
                              _ -> id({join, NewFValue}, TrUserData)
                          end,
                          TrUserData).

d_field_nh_part(<<1:1, X:7, Rest/binary>>, N, Acc, F@_1,
                TrUserData)
    when N < 57 ->
    d_field_nh_part(Rest,
                    N + 7,
                    X bsl N + Acc,
                    F@_1,
                    TrUserData);
d_field_nh_part(<<0:1, X:7, Rest/binary>>, N, Acc, Prev,
                TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_part(Bs, TrUserData), TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_nh(RestF,
                          0,
                          0,
                          case Prev of
                              '$undef' -> id({part, NewFValue}, TrUserData);
                              {part, MVPrev} ->
                                  id({part,
                                      merge_msg_part(MVPrev,
                                                     NewFValue,
                                                     TrUserData)},
                                     TrUserData);
                              _ -> id({part, NewFValue}, TrUserData)
                          end,
                          TrUserData).

d_field_nh_snapshot(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, TrUserData)
    when N < 57 ->
    d_field_nh_snapshot(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        TrUserData);
d_field_nh_snapshot(<<0:1, X:7, Rest/binary>>, N, Acc,
                    Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_snapshot(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_nh(RestF,
                          0,
                          0,
                          case Prev of
                              '$undef' -> id({snapshot, NewFValue}, TrUserData);
                              {snapshot, MVPrev} ->
                                  id({snapshot,
                                      merge_msg_snapshot(MVPrev,
                                                         NewFValue,
                                                         TrUserData)},
                                     TrUserData);
                              _ -> id({snapshot, NewFValue}, TrUserData)
                          end,
                          TrUserData).

d_field_nh_transfer(<<1:1, X:7, Rest/binary>>, N, Acc,
                    F@_1, TrUserData)
    when N < 57 ->
    d_field_nh_transfer(Rest,
                        N + 7,
                        X bsl N + Acc,
                        F@_1,
                        TrUserData);
d_field_nh_transfer(<<0:1, X:7, Rest/binary>>, N, Acc,
                    Prev, TrUserData) ->
    {NewFValue, RestF} = begin
                             Len = X bsl N + Acc,
                             <<Bs:Len/binary, Rest2/binary>> = Rest,
                             {id(decode_msg_transfer(Bs, TrUserData),
                                 TrUserData),
                              Rest2}
                         end,
    dfp_read_field_def_nh(RestF,
                          0,
                          0,
                          case Prev of
                              '$undef' -> id({transfer, NewFValue}, TrUserData);
                              {transfer, MVPrev} ->
                                  id({transfer,
                                      merge_msg_transfer(MVPrev,
                                                         NewFValue,
                                                         TrUserData)},
                                     TrUserData);
                              _ -> id({transfer, NewFValue}, TrUserData)
                          end,
                          TrUserData).

skip_varint_nh(<<1:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
               TrUserData) ->
    skip_varint_nh(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_nh(<<0:1, _:7, Rest/binary>>, Z1, Z2, F@_1,
               TrUserData) ->
    dfp_read_field_def_nh(Rest, Z1, Z2, F@_1, TrUserData).

skip_length_delimited_nh(<<1:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_nh(Rest,
                             N + 7,
                             X bsl N + Acc,
                             F@_1,
                             TrUserData);
skip_length_delimited_nh(<<0:1, X:7, Rest/binary>>, N,
                         Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_nh(Rest2, 0, 0, F@_1, TrUserData).

skip_group_nh(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_nh(Rest, 0, Z2, F@_1, TrUserData).

skip_32_nh(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
           TrUserData) ->
    dfp_read_field_def_nh(Rest, Z1, Z2, F@_1, TrUserData).

skip_64_nh(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
           TrUserData) ->
    dfp_read_field_def_nh(Rest, Z1, Z2, F@_1, TrUserData).

decode_msg_vector2(Bin, TrUserData) ->
    dfp_read_field_def_vector2(Bin,
                               0,
                               0,
                               id('$undef', TrUserData),
                               id('$undef', TrUserData),
                               TrUserData).

dfp_read_field_def_vector2(<<13, Rest/binary>>, Z1, Z2,
                           F@_1, F@_2, TrUserData) ->
    d_field_vector2_x(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_vector2(<<21, Rest/binary>>, Z1, Z2,
                           F@_1, F@_2, TrUserData) ->
    d_field_vector2_y(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_vector2(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{x => F@_1, y => F@_2};
dfp_read_field_def_vector2(Other, Z1, Z2, F@_1, F@_2,
                           TrUserData) ->
    dg_read_field_def_vector2(Other,
                              Z1,
                              Z2,
                              F@_1,
                              F@_2,
                              TrUserData).

dg_read_field_def_vector2(<<1:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_vector2(Rest,
                              N + 7,
                              X bsl N + Acc,
                              F@_1,
                              F@_2,
                              TrUserData);
dg_read_field_def_vector2(<<0:1, X:7, Rest/binary>>, N,
                          Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
        13 ->
            d_field_vector2_x(Rest, 0, 0, F@_1, F@_2, TrUserData);
        21 ->
            d_field_vector2_y(Rest, 0, 0, F@_1, F@_2, TrUserData);
        _ ->
            case Key band 7 of
                0 ->
                    skip_varint_vector2(Rest, 0, 0, F@_1, F@_2, TrUserData);
                1 ->
                    skip_64_vector2(Rest, 0, 0, F@_1, F@_2, TrUserData);
                2 ->
                    skip_length_delimited_vector2(Rest,
                                                  0,
                                                  0,
                                                  F@_1,
                                                  F@_2,
                                                  TrUserData);
                3 ->
                    skip_group_vector2(Rest,
                                       Key bsr 3,
                                       0,
                                       F@_1,
                                       F@_2,
                                       TrUserData);
                5 -> skip_32_vector2(Rest, 0, 0, F@_1, F@_2, TrUserData)
            end
    end;
dg_read_field_def_vector2(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{x => F@_1, y => F@_2}.

d_field_vector2_x(<<0:16, 128, 127, Rest/binary>>, Z1,
                  Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               id(infinity, TrUserData),
                               F@_2,
                               TrUserData);
d_field_vector2_x(<<0:16, 128, 255, Rest/binary>>, Z1,
                  Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               id('-infinity', TrUserData),
                               F@_2,
                               TrUserData);
d_field_vector2_x(<<_:16, 1:1, _:7, _:1, 127:7,
                    Rest/binary>>,
                  Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               id(nan, TrUserData),
                               F@_2,
                               TrUserData);
d_field_vector2_x(<<Value:32/little-float,
                    Rest/binary>>,
                  Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               id(Value, TrUserData),
                               F@_2,
                               TrUserData).

d_field_vector2_y(<<0:16, 128, 127, Rest/binary>>, Z1,
                  Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               id(infinity, TrUserData),
                               TrUserData);
d_field_vector2_y(<<0:16, 128, 255, Rest/binary>>, Z1,
                  Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               id('-infinity', TrUserData),
                               TrUserData);
d_field_vector2_y(<<_:16, 1:1, _:7, _:1, 127:7,
                    Rest/binary>>,
                  Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               id(nan, TrUserData),
                               TrUserData);
d_field_vector2_y(<<Value:32/little-float,
                    Rest/binary>>,
                  Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               id(Value, TrUserData),
                               TrUserData).

skip_varint_vector2(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                    F@_1, F@_2, TrUserData) ->
    skip_varint_vector2(Rest,
                        Z1,
                        Z2,
                        F@_1,
                        F@_2,
                        TrUserData);
skip_varint_vector2(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                    F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               TrUserData).

skip_length_delimited_vector2(<<1:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_vector2(Rest,
                                  N + 7,
                                  X bsl N + Acc,
                                  F@_1,
                                  F@_2,
                                  TrUserData);
skip_length_delimited_vector2(<<0:1, X:7, Rest/binary>>,
                              N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_vector2(Rest2,
                               0,
                               0,
                               F@_1,
                               F@_2,
                               TrUserData).

skip_group_vector2(Bin, FNum, Z2, F@_1, F@_2,
                   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_vector2(Rest,
                               0,
                               Z2,
                               F@_1,
                               F@_2,
                               TrUserData).

skip_32_vector2(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
                F@_2, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               TrUserData).

skip_64_vector2(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
                F@_2, TrUserData) ->
    dfp_read_field_def_vector2(Rest,
                               Z1,
                               Z2,
                               F@_1,
                               F@_2,
                               TrUserData).

decode_msg_transfer(Bin, TrUserData) ->
    dfp_read_field_def_transfer(Bin, 0, 0, TrUserData).

dfp_read_field_def_transfer(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_transfer(Other, Z1, Z2,
                            TrUserData) ->
    dg_read_field_def_transfer(Other, Z1, Z2, TrUserData).

dg_read_field_def_transfer(<<1:1, X:7, Rest/binary>>, N,
                           Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_transfer(Rest,
                               N + 7,
                               X bsl N + Acc,
                               TrUserData);
dg_read_field_def_transfer(<<0:1, X:7, Rest/binary>>, N,
                           Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_transfer(Rest, 0, 0, TrUserData);
        1 -> skip_64_transfer(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_transfer(Rest, 0, 0, TrUserData);
        3 ->
            skip_group_transfer(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_transfer(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_transfer(<<>>, 0, 0, _) -> #{}.

skip_varint_transfer(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                     TrUserData) ->
    skip_varint_transfer(Rest, Z1, Z2, TrUserData);
skip_varint_transfer(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                     TrUserData) ->
    dfp_read_field_def_transfer(Rest, Z1, Z2, TrUserData).

skip_length_delimited_transfer(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_transfer(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   TrUserData);
skip_length_delimited_transfer(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_transfer(Rest2, 0, 0, TrUserData).

skip_group_transfer(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_transfer(Rest, 0, Z2, TrUserData).

skip_32_transfer(<<_:32, Rest/binary>>, Z1, Z2,
                 TrUserData) ->
    dfp_read_field_def_transfer(Rest, Z1, Z2, TrUserData).

skip_64_transfer(<<_:64, Rest/binary>>, Z1, Z2,
                 TrUserData) ->
    dfp_read_field_def_transfer(Rest, Z1, Z2, TrUserData).

decode_msg_snapshot(Bin, TrUserData) ->
    dfp_read_field_def_snapshot(Bin, 0, 0, TrUserData).

dfp_read_field_def_snapshot(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_snapshot(Other, Z1, Z2,
                            TrUserData) ->
    dg_read_field_def_snapshot(Other, Z1, Z2, TrUserData).

dg_read_field_def_snapshot(<<1:1, X:7, Rest/binary>>, N,
                           Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_snapshot(Rest,
                               N + 7,
                               X bsl N + Acc,
                               TrUserData);
dg_read_field_def_snapshot(<<0:1, X:7, Rest/binary>>, N,
                           Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_snapshot(Rest, 0, 0, TrUserData);
        1 -> skip_64_snapshot(Rest, 0, 0, TrUserData);
        2 ->
            skip_length_delimited_snapshot(Rest, 0, 0, TrUserData);
        3 ->
            skip_group_snapshot(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_snapshot(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_snapshot(<<>>, 0, 0, _) -> #{}.

skip_varint_snapshot(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                     TrUserData) ->
    skip_varint_snapshot(Rest, Z1, Z2, TrUserData);
skip_varint_snapshot(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                     TrUserData) ->
    dfp_read_field_def_snapshot(Rest, Z1, Z2, TrUserData).

skip_length_delimited_snapshot(<<1:1, X:7,
                                 Rest/binary>>,
                               N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_snapshot(Rest,
                                   N + 7,
                                   X bsl N + Acc,
                                   TrUserData);
skip_length_delimited_snapshot(<<0:1, X:7,
                                 Rest/binary>>,
                               N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_snapshot(Rest2, 0, 0, TrUserData).

skip_group_snapshot(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_snapshot(Rest, 0, Z2, TrUserData).

skip_32_snapshot(<<_:32, Rest/binary>>, Z1, Z2,
                 TrUserData) ->
    dfp_read_field_def_snapshot(Rest, Z1, Z2, TrUserData).

skip_64_snapshot(<<_:64, Rest/binary>>, Z1, Z2,
                 TrUserData) ->
    dfp_read_field_def_snapshot(Rest, Z1, Z2, TrUserData).

decode_msg_join(Bin, TrUserData) ->
    dfp_read_field_def_join(Bin, 0, 0, TrUserData).

dfp_read_field_def_join(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_join(Other, Z1, Z2, TrUserData) ->
    dg_read_field_def_join(Other, Z1, Z2, TrUserData).

dg_read_field_def_join(<<1:1, X:7, Rest/binary>>, N,
                       Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_join(Rest,
                           N + 7,
                           X bsl N + Acc,
                           TrUserData);
dg_read_field_def_join(<<0:1, X:7, Rest/binary>>, N,
                       Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_join(Rest, 0, 0, TrUserData);
        1 -> skip_64_join(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_join(Rest, 0, 0, TrUserData);
        3 -> skip_group_join(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_join(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_join(<<>>, 0, 0, _) -> #{}.

skip_varint_join(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                 TrUserData) ->
    skip_varint_join(Rest, Z1, Z2, TrUserData);
skip_varint_join(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                 TrUserData) ->
    dfp_read_field_def_join(Rest, Z1, Z2, TrUserData).

skip_length_delimited_join(<<1:1, X:7, Rest/binary>>, N,
                           Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_join(Rest,
                               N + 7,
                               X bsl N + Acc,
                               TrUserData);
skip_length_delimited_join(<<0:1, X:7, Rest/binary>>, N,
                           Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_join(Rest2, 0, 0, TrUserData).

skip_group_join(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_join(Rest, 0, Z2, TrUserData).

skip_32_join(<<_:32, Rest/binary>>, Z1, Z2,
             TrUserData) ->
    dfp_read_field_def_join(Rest, Z1, Z2, TrUserData).

skip_64_join(<<_:64, Rest/binary>>, Z1, Z2,
             TrUserData) ->
    dfp_read_field_def_join(Rest, Z1, Z2, TrUserData).

decode_msg_part(Bin, TrUserData) ->
    dfp_read_field_def_part(Bin, 0, 0, TrUserData).

dfp_read_field_def_part(<<>>, 0, 0, _) -> #{};
dfp_read_field_def_part(Other, Z1, Z2, TrUserData) ->
    dg_read_field_def_part(Other, Z1, Z2, TrUserData).

dg_read_field_def_part(<<1:1, X:7, Rest/binary>>, N,
                       Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_part(Rest,
                           N + 7,
                           X bsl N + Acc,
                           TrUserData);
dg_read_field_def_part(<<0:1, X:7, Rest/binary>>, N,
                       Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
        0 -> skip_varint_part(Rest, 0, 0, TrUserData);
        1 -> skip_64_part(Rest, 0, 0, TrUserData);
        2 -> skip_length_delimited_part(Rest, 0, 0, TrUserData);
        3 -> skip_group_part(Rest, Key bsr 3, 0, TrUserData);
        5 -> skip_32_part(Rest, 0, 0, TrUserData)
    end;
dg_read_field_def_part(<<>>, 0, 0, _) -> #{}.

skip_varint_part(<<1:1, _:7, Rest/binary>>, Z1, Z2,
                 TrUserData) ->
    skip_varint_part(Rest, Z1, Z2, TrUserData);
skip_varint_part(<<0:1, _:7, Rest/binary>>, Z1, Z2,
                 TrUserData) ->
    dfp_read_field_def_part(Rest, Z1, Z2, TrUserData).

skip_length_delimited_part(<<1:1, X:7, Rest/binary>>, N,
                           Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_part(Rest,
                               N + 7,
                               X bsl N + Acc,
                               TrUserData);
skip_length_delimited_part(<<0:1, X:7, Rest/binary>>, N,
                           Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_part(Rest2, 0, 0, TrUserData).

skip_group_part(Bin, FNum, Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_part(Rest, 0, Z2, TrUserData).

skip_32_part(<<_:32, Rest/binary>>, Z1, Z2,
             TrUserData) ->
    dfp_read_field_def_part(Rest, Z1, Z2, TrUserData).

skip_64_part(<<_:64, Rest/binary>>, Z1, Z2,
             TrUserData) ->
    dfp_read_field_def_part(Rest, Z1, Z2, TrUserData).

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        nh -> merge_msg_nh(Prev, New, TrUserData);
        vector2 -> merge_msg_vector2(Prev, New, TrUserData);
        transfer -> merge_msg_transfer(Prev, New, TrUserData);
        snapshot -> merge_msg_snapshot(Prev, New, TrUserData);
        join -> merge_msg_join(Prev, New, TrUserData);
        part -> merge_msg_part(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_nh/3}).
merge_msg_nh(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
        {#{msg := {join, OPFmsg}}, #{msg := {join, ONFmsg}}} ->
            S1#{msg =>
                    {join, merge_msg_join(OPFmsg, ONFmsg, TrUserData)}};
        {#{msg := {part, OPFmsg}}, #{msg := {part, ONFmsg}}} ->
            S1#{msg =>
                    {part, merge_msg_part(OPFmsg, ONFmsg, TrUserData)}};
        {#{msg := {snapshot, OPFmsg}},
         #{msg := {snapshot, ONFmsg}}} ->
            S1#{msg =>
                    {snapshot,
                     merge_msg_snapshot(OPFmsg, ONFmsg, TrUserData)}};
        {#{msg := {transfer, OPFmsg}},
         #{msg := {transfer, ONFmsg}}} ->
            S1#{msg =>
                    {transfer,
                     merge_msg_transfer(OPFmsg, ONFmsg, TrUserData)}};
        {_, #{msg := NFmsg}} -> S1#{msg => NFmsg};
        {#{msg := PFmsg}, _} -> S1#{msg => PFmsg};
        {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_vector2/3}).
merge_msg_vector2(#{}, #{x := NFx, y := NFy}, _) ->
    #{x => NFx, y => NFy}.

-compile({nowarn_unused_function,merge_msg_transfer/3}).
merge_msg_transfer(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_snapshot/3}).
merge_msg_snapshot(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_join/3}).
merge_msg_join(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,merge_msg_part/3}).
merge_msg_part(_Prev, New, _TrUserData) -> New.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
        nh -> v_msg_nh(Msg, [MsgName], TrUserData);
        vector2 -> v_msg_vector2(Msg, [MsgName], TrUserData);
        transfer -> v_msg_transfer(Msg, [MsgName], TrUserData);
        snapshot -> v_msg_snapshot(Msg, [MsgName], TrUserData);
        join -> v_msg_join(Msg, [MsgName], TrUserData);
        part -> v_msg_part(Msg, [MsgName], TrUserData);
        _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_nh/3}).
-dialyzer({nowarn_function,v_msg_nh/3}).
v_msg_nh(#{} = M, Path, TrUserData) ->
    case M of
        #{msg := {join, OF1}} ->
            v_msg_join(OF1, [join, msg | Path], TrUserData);
        #{msg := {part, OF1}} ->
            v_msg_part(OF1, [part, msg | Path], TrUserData);
        #{msg := {snapshot, OF1}} ->
            v_msg_snapshot(OF1, [snapshot, msg | Path], TrUserData);
        #{msg := {transfer, OF1}} ->
            v_msg_transfer(OF1, [transfer, msg | Path], TrUserData);
        #{msg := F1} ->
            mk_type_error(invalid_oneof, F1, [msg | Path]);
        _ -> ok
    end,
    lists:foreach(fun (msg) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_nh(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M), nh},
                  M,
                  Path);
v_msg_nh(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, nh}, X, Path).

-compile({nowarn_unused_function,v_msg_vector2/3}).
-dialyzer({nowarn_function,v_msg_vector2/3}).
v_msg_vector2(#{x := F1, y := F2} = M, Path,
              TrUserData) ->
    v_type_float(F1, [x | Path], TrUserData),
    v_type_float(F2, [y | Path], TrUserData),
    lists:foreach(fun (x) -> ok;
                      (y) -> ok;
                      (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_vector2(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [x, y] -- maps:keys(M),
                   vector2},
                  M,
                  Path);
v_msg_vector2(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, vector2}, X, Path).

-compile({nowarn_unused_function,v_msg_transfer/3}).
-dialyzer({nowarn_function,v_msg_transfer/3}).
v_msg_transfer(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_transfer(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   transfer},
                  M,
                  Path);
v_msg_transfer(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, transfer}, X, Path).

-compile({nowarn_unused_function,v_msg_snapshot/3}).
-dialyzer({nowarn_function,v_msg_snapshot/3}).
v_msg_snapshot(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_snapshot(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   snapshot},
                  M,
                  Path);
v_msg_snapshot(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, snapshot}, X, Path).

-compile({nowarn_unused_function,v_msg_join/3}).
-dialyzer({nowarn_function,v_msg_join/3}).
v_msg_join(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_join(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   join},
                  M,
                  Path);
v_msg_join(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, join}, X, Path).

-compile({nowarn_unused_function,v_msg_part/3}).
-dialyzer({nowarn_function,v_msg_part/3}).
v_msg_part(#{} = M, Path, _) ->
    lists:foreach(fun (OtherKey) ->
                          mk_type_error({extraneous_key, OtherKey}, M, Path)
                  end,
                  maps:keys(M)),
    ok;
v_msg_part(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields,
                   [] -- maps:keys(M),
                   part},
                  M,
                  Path);
v_msg_part(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, part}, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
                  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
                                         lists:map(fun atom_to_list/1,
                                                   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.


get_msg_defs() ->
    [{{msg, nh},
      [#{name => msg, rnum => 2,
         fields =>
             [#{name => join, fnum => 1, rnum => 2,
                type => {msg, join}, occurrence => optional,
                opts => []},
              #{name => part, fnum => 2, rnum => 2,
                type => {msg, part}, occurrence => optional,
                opts => []},
              #{name => snapshot, fnum => 3, rnum => 2,
                type => {msg, snapshot}, occurrence => optional,
                opts => []},
              #{name => transfer, fnum => 4, rnum => 2,
                type => {msg, transfer}, occurrence => optional,
                opts => []}]}]},
     {{msg, vector2},
      [#{name => x, fnum => 1, rnum => 2, type => float,
         occurrence => required, opts => []},
       #{name => y, fnum => 2, rnum => 3, type => float,
         occurrence => required, opts => []}]},
     {{msg, transfer}, []},
     {{msg, snapshot}, []},
     {{msg, join}, []},
     {{msg, part}, []}].


get_msg_names() ->
    [nh, vector2, transfer, snapshot, join, part].


get_group_names() -> [].


get_msg_or_group_names() ->
    [nh, vector2, transfer, snapshot, join, part].


get_enum_names() -> [].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
        Fs when is_list(Fs) -> Fs;
        error -> erlang:error({no_such_msg, MsgName})
    end.


-spec fetch_enum_def(_) -> no_return().
fetch_enum_def(EnumName) ->
    erlang:error({no_such_enum, EnumName}).


find_msg_def(nh) ->
    [#{name => msg, rnum => 2,
       fields =>
           [#{name => join, fnum => 1, rnum => 2,
              type => {msg, join}, occurrence => optional,
              opts => []},
            #{name => part, fnum => 2, rnum => 2,
              type => {msg, part}, occurrence => optional,
              opts => []},
            #{name => snapshot, fnum => 3, rnum => 2,
              type => {msg, snapshot}, occurrence => optional,
              opts => []},
            #{name => transfer, fnum => 4, rnum => 2,
              type => {msg, transfer}, occurrence => optional,
              opts => []}]}];
find_msg_def(vector2) ->
    [#{name => x, fnum => 1, rnum => 2, type => float,
       occurrence => required, opts => []},
     #{name => y, fnum => 2, rnum => 3, type => float,
       occurrence => required, opts => []}];
find_msg_def(transfer) -> [];
find_msg_def(snapshot) -> [];
find_msg_def(join) -> [];
find_msg_def(part) -> [];
find_msg_def(_) -> error.


find_enum_def(_) -> error.


-spec enum_symbol_by_value(_, _) -> no_return().
enum_symbol_by_value(E, V) ->
    erlang:error({no_enum_defs, E, V}).


-spec enum_value_by_symbol(_, _) -> no_return().
enum_value_by_symbol(E, V) ->
    erlang:error({no_enum_defs, E, V}).



get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"nh.nh">>) -> nh;
fqbin_to_msg_name(<<"nh.vector2">>) -> vector2;
fqbin_to_msg_name(<<"nh.transfer">>) -> transfer;
fqbin_to_msg_name(<<"nh.snapshot">>) -> snapshot;
fqbin_to_msg_name(<<"nh.join">>) -> join;
fqbin_to_msg_name(<<"nh.part">>) -> part;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(nh) -> <<"nh.nh">>;
msg_name_to_fqbin(vector2) -> <<"nh.vector2">>;
msg_name_to_fqbin(transfer) -> <<"nh.transfer">>;
msg_name_to_fqbin(snapshot) -> <<"nh.snapshot">>;
msg_name_to_fqbin(join) -> <<"nh.join">>;
msg_name_to_fqbin(part) -> <<"nh.part">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


-spec fqbin_to_enum_name(_) -> no_return().
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


-spec enum_name_to_fqbin(_) -> no_return().
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> nh.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> false.


source_basename() -> "nh.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() -> ["nh.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() -> ["nh"].


get_msg_containment("nh") ->
    [join, nh, part, snapshot, transfer, vector2];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("nh") -> undefined;
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("nh") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("nh") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("nh") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"nh.vector2">>) -> "nh";
get_proto_by_msg_name_as_fqbin(<<"nh.transfer">>) -> "nh";
get_proto_by_msg_name_as_fqbin(<<"nh.snapshot">>) -> "nh";
get_proto_by_msg_name_as_fqbin(<<"nh.part">>) -> "nh";
get_proto_by_msg_name_as_fqbin(<<"nh.nh">>) -> "nh";
get_proto_by_msg_name_as_fqbin(<<"nh.join">>) -> "nh";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


-spec get_proto_by_enum_name_as_fqbin(_) -> no_return().
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


-spec get_protos_by_pkg_name_as_fqbin(_) -> no_return().
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.11.2".

gpb_version_as_list() ->
    [4,11,2].
